@page "/alimentation"
@using Alimentations.Models; 
@using Alimentations.Repositories;
@inject AlimentationRepository _alimentationRepository;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject DepotRepository  _depotRepository

  <button type="button" class="btn btn-labeled btn-danger" @onclick="DeleteSelectedItems">Supprimer</button>
  <button type="button" class="btn btn-labeled btn-warning" @onclick="NavigateToAddPage">Ajouter une alimentation</button>


<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th>ID</th>
            <th>Date</th>
            <th>Total Price</th>
            <th>Depot Designation</th>
            <th>Depot Ville</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var alimentation in Alimentations)
        {
            <tr @onclick="(() => ToggleArticles(alimentation))">
                <td>@alimentation.ID</td>
                <td>@(alimentation.Date.HasValue ? alimentation.Date.Value.ToShortDateString() : "N/A")</td>

                <td>@alimentation.TotalPrice MAD</td>
                <td>@(alimentation.Depot != null ? alimentation.Depot.Designation : "N/A")</td>
                <td>@(alimentation.Depot != null ? alimentation.Depot.Ville : "N/A")</td
                <td>
                    <input type="checkbox" @bind="alimentation.IsSelected" />
                </td>
              <td>
    <button class="btn btn-primary" @onclick="(() => RedirectToUpdatePage(alimentation.ID))">Update</button>
</td>

            </tr>

            @if (alimentation.ShowArticles)
            {
               <tr>
                        <td colspan="4">
                            <table class="table table-success table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Quantity</th>
                                        <th>Article ID</th>
                                        <th>Article Designation</th>
                                        <th>Article Marque</th>
                                        <th>Article Price</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var article in AlimentationArticles[alimentation.ID])
                                    {
                                        <tr>
                                         <td>@article.Quantity</td>
                                        <td>@article.Article.ID</td>
                                          <td>@article.Article.Designation</td>
                                         <td>@article.Article.Marque</td>
                                          <td>@article.Article.Prix</td>
                                        </tr>
                                    }
                          </tbody>
                        </table>
                    </td>
                </tr>
               
            }
        }
    </tbody>
</table>





@code {
    List<AlimentationModel> Alimentations = new List<AlimentationModel>();
    Dictionary<int, List<AlimentationArticleModel>> AlimentationArticles = new Dictionary<int, List<AlimentationArticleModel>>();
    
    protected override async Task OnInitializedAsync()
    {
        Alimentations = await _alimentationRepository.GetAlimentations();
       
        foreach (var alimentation in Alimentations)
        {
            AlimentationArticles[alimentation.ID] = await _alimentationRepository.GetArticlesForAlimentation(alimentation.ID);
        }
    }

    void ToggleArticles(AlimentationModel alimentation)
    {
        alimentation.ShowArticles = !alimentation.ShowArticles;
    }

   private async Task DeleteSelectedItems()
     {
    try
    {
        // Get the selected Alimentation IDs
        var selectedAlimentations = Alimentations.Where(a => a.IsSelected).ToList();

        // Check if there are any selected items
        if (selectedAlimentations.Count == 0)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Cocher une alimentation.");
            return;
        }

        // Show a confirmation dialog
        bool confirmed = await JSRuntime.InvokeAsync<bool>("window.confirm", "vous etes sur ?");

        if (!confirmed)
        {
            return;
        }

        foreach (var selectedAlimentation in selectedAlimentations)
        {
            // Call the repository method to delete each selected item
            await _alimentationRepository.DeleteAlimentationAsync(selectedAlimentation.ID);
        }

        // Refresh the data after deletion
        Alimentations = await _alimentationRepository.GetAlimentations();
    }
    catch (Exception ex)
    {
        // Handle the exception or log it
        await JSRuntime.InvokeVoidAsync("alert", $"Error deleting items: {ex.Message}");
    }
     }

    void RedirectToUpdatePage(int alimentationId) {
        // Assuming your update page route is '/update/{id}'
        NavigationManager.NavigateTo($"/update/{alimentationId}");
    }
    private void ExecuteJS(string script)
    {
        JSRuntime.InvokeVoidAsync("eval", script);
    }
     private void NavigateToAddPage()
    {
        NavigationManager.NavigateTo("/add");
    }
}



