@page "/update/{id:int}"
@using Alimentations.Models;
@using Alimentations.Repositories;
@inject AlimentationRepository _alimentationRepository;
@inject ArticleRepository _articleRepository;
@inject DepotRepository _depotRepository;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
<h3>Alimentation Modification</h3>
@if (alimentations != null)
{
    <div class="container">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Alimentation Details</h4>
                
                <div class="mb-3">
                    <label for="dateInput" class="form-label">Date:</label>
                    <input type="date" class="form-control" id="dateInput" @bind="alimentations.Date" />
                </div>
               
                <p class="card-text">Dépot :</p>

                @if (Depots != null)
                {
                    <div class="mb-3">
                    
                        <select class="form-select" id="depotDropdown" @bind="selectedDepotId">
                            @if (alimentations.Depot != null)
                            {
                                <option value="@alimentations.Depot.ID" selected>@alimentations.Depot.Designation, @alimentations.Depot.Ville</option>
                            }
                            else
                            {
                                <option value="" selected disabled>Choose Depot</option>
                            }
                            @foreach (var depot in Depots)
                            {
                                if (alimentations.Depot != null && depot.ID == alimentations.Depot.ID)
                                {
                                    continue; // Skip the depot that is already selected
                                }
                                <option value="@depot.ID">@depot.Designation, @depot.Ville</option>
                            }
                        </select>
                    </div>
                }

                <button type="button" class="btn btn-warning" @onclick="UpdateAlimentation">Sauvegarder</button>
            </div>
        </div>

        <div class="card mt-4">
            <div class="card-body">
                <h4 class="card-title">Articles</h4>
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Quantity</th>
                            <th>Article ID</th>
                            <th>Article Designation</th>
                            <th>Article Marque</th>
                            <th>Prix Article</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var article in articles)
                        {
                            <tr>
                                <td>
                                    <input type="number" class="form-control" @bind="article.Quantity" />
                                </td>
                                <td>@article.Article.ID</td>
                                <td>@article.Article.Designation</td>
                                <td>@article.Article.Marque</td>
                                <td>@article.Article.Prix</td>
                                <td>
                                    <button type="button" class="btn btn-success btn-sm" @onclick="(e) => UpdateQuantity(article)">Modifier la quantité</button>
                                    <button type="button" class="btn btn-danger btn-sm" @onclick="(e) => DeleteArticle(article.Article.ID)">Supprimer</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>

                <button type="button" class="btn btn-primary" @onclick="UpdateAllQuantities">Modifier toutes les quantités</button>

                <button type="button" class="btn btn-dark" data-bs-toggle="modal" data-bs-target="#articleModal">
                    Ajouter un nouveau article
                </button>
            </div>
        </div>
    </div>
        <div class="modal fade" id="articleModal" tabindex="-1" aria-labelledby="articleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="articleModalLabel">Choisir les articles</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        @if (Articles != null)
                        {
                            <div class="mb-3">
                             
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th></th>
                                            <th>ID</th>
                                            <th>Designation</th>
                                            <th>Marque</th>
                                            <th>Prix</th>
                                            <th>Quantité</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var article in Articles)
                                        {
                                            <tr>
                                                <td>
                                                    <input type="checkbox" @onchange="(e) => ToggleArticleSelection(article.ID, e)" />
                                                </td>
                                                <td>@article.ID</td>
                                                <td>@article.Designation</td>
                                                <td>@article.Marque</td>
                                                <td>@article.Prix</td>
                                                <td>
                                                    @{
                                                        var quantityValue = articleQuantities.ContainsKey(article.ID) ? articleQuantities[article.ID] : 0;
                                                    }
                                                    <input type="number" class="form-control" value="@quantityValue" @oninput="(e) => UpdateQuantity(article.ID, int.Parse(e.Value.ToString()))" placeholder="Quantity" min="1" />
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-secondary" @onclick="SaveArticles" data-bs-dismiss="modal">Save</button>

                    </div>
                </div>
            </div>
        </div>
   
}
else
{
    <p>Loading... @Id</p>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private int selectedDepotId;
    private List<int> selectedArticleIds = new List<int>();
    private Dictionary<int, int> articleQuantities = new Dictionary<int, int>();
    private AlimentationModel alimentations;
    private List<AlimentationArticleModel> articles;
    private List<DepotModel> Depots { get; set; }
    private List<ArticleModel> Articles { get; set; }
    private async Task UpdateQuantity(AlimentationArticleModel article)
    {
        try
        {
            // Call the repository method to update the quantity of the specific article
            await _alimentationRepository.UpdateArticleQuantity(article.AlimentationID, article.Article.ID, article.Quantity);
            await JSRuntime.InvokeVoidAsync("alert", $"Quantity updated for Article : {article.Article.Designation}");
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating quantity: {ex.Message}");
        }
    }

    private async Task UpdateAllQuantities()
    {
        try
        {
           
            foreach (var article in articles)
            {
                await _alimentationRepository.UpdateArticleQuantity(article.AlimentationID, article.Article.ID, article.Quantity);
            }
            await JSRuntime.InvokeVoidAsync("alert", $"All quantities updated successfully.");

        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating quantities: {ex.Message}");
        }
    }








    private async Task UpdateAlimentation()
    {
        try
        {
            // Update the Alimentation with the selected date and depot
            alimentations.Depot = Depots.FirstOrDefault(d => d.ID == selectedDepotId);
            await JSRuntime.InvokeVoidAsync("alert", $"Les détails de l'alimentation on été modifiés avec succcés");
            // Call the repository method to update the Alimentation
            await _alimentationRepository.UpdateAlimentation(alimentations.ID, alimentations.Date, selectedDepotId);

            Console.WriteLine("Alimentation updated successfully.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating Alimentation: {ex.Message}");
        }
    }







    protected override async Task OnInitializedAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"method called");

            var fetchedAlimentations = await _alimentationRepository.GetAlimentationsSync(Id);

            await JSRuntime.InvokeVoidAsync("console.log", $"Fetched Alimentations{fetchedAlimentations?.Count}");

            alimentations = fetchedAlimentations?.FirstOrDefault();
            Depots = await _depotRepository.GetDepotsNot(Id);
            Articles = await _articleRepository.GetArticlesNot(Id);

            if (alimentations != null)
            {

                articles = await _alimentationRepository.GetArticlesForAlimentation(alimentations.ID);
            }
            else
            {

                await JSRuntime.InvokeVoidAsync("console.log", $"AAlimentations is null for ID: ID={Id}");

            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle the exception or log it
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task<List<AlimentationArticleModel>> GetAlimentationArticles()
    {
        var selectedArticles = Articles.Where(a => selectedArticleIds.Contains(a.ID)).ToList();

        foreach (var article in selectedArticles)
        {
            var quantity = articleQuantities.TryGetValue(article.ID, out var q) ? q : 1;
            await JSRuntime.InvokeVoidAsync("console.log", $"Selected Article: ID={article.ID}, Quantity={quantity}");
        }

        return selectedArticles
            .Select(a => new AlimentationArticleModel
                {
                    ArticleID = a.ID,
                    Quantity = articleQuantities.TryGetValue(a.ID, out var quantity) ? quantity : 1
                })
            .ToList();
    }



    private async Task SaveArticles()
    {


        try
        {
            await _alimentationRepository.InsertAlimentationArticles(Id, await GetAlimentationArticles());

            await OnInitializedAsync();

        }
        catch ( Exception ex)
        {
            
        }


    }




    private async Task ToggleArticleSelection(int articleId, ChangeEventArgs e)
    {
        try
        {

            await JSRuntime.InvokeVoidAsync("console.log", $"Toggling selection for Article ID: {articleId}");

            if (e.Value is bool isChecked && isChecked)
            {
                selectedArticleIds.Add(articleId);
                await JSRuntime.InvokeVoidAsync("console.log", $"Article Added ID: {articleId}");
            }
            else
            {
                selectedArticleIds.Remove(articleId);
                await JSRuntime.InvokeVoidAsync("console.log", $"Article Removed ID: {articleId}");
            }

            // Debugging statement to display selectedArticleIds in the browser console
            await JSRuntime.InvokeVoidAsync("console.log", $"Selected Article IDs: {string.Join(", ", selectedArticleIds)}");
        }
        catch (Exception ex)
        {
            // Handle the exception or log it
            Console.WriteLine($"Error toggling article selection: {ex.Message}");

            // Show error message
            await JSRuntime.InvokeVoidAsync("alert", $"Error toggling article selection: {ex.Message}");
        }
    }

    private void UpdateQuantity(int articleId, int newQuantity)
    {
        if (articleQuantities.ContainsKey(articleId))
        {
            articleQuantities[articleId] = newQuantity;
            Console.WriteLine($"Updated quantity for Article ID: {articleId} to {newQuantity}");

        }
        else
        {
            // Handle the case where the articleId is not in the dictionary
            Console.WriteLine($"Article ID {articleId} not found in the dictionary.");
        }
    }
    async Task DeleteArticle(int articleId)
    {
        try

        {
            bool confirmed = await JSRuntime.InvokeAsync<bool>("window.confirm", "are you sure ???? ?");

            if (!confirmed)
            {
                return;
            }
            await _alimentationRepository.DeleteAlimentationArticle(Id, articleId);
          
            // Refresh the list of articles after deletion
            await OnInitializedAsync();
            await JSRuntime.InvokeVoidAsync("alert", "AlimentationDeleted");
            // Display a success message or notification
        }
        catch (Exception ex)
        {
            // Handle error, e.g., display an error message
        }
    }

}
